@startuml
|Main|
start
:let future = async {
    println!("Starting async task")
    let result = read_file("test.txt").await
    println!("Result: {}", result)
};

:MY_EXECUTOR.block_on(future);

|#AntiqueWhite|Executor|
:queue.push_back(Arc::new(Task::new(future)));

while (queue.is_empty() == false)
    :let task = queue.pop_front().unwrap()
    let waker = task::waker(task.clone())
    let cx = Context::from_waker(&waker);

    |Task|
    :task.future.as_mut().poll(&mut cx);

    |Future|
    if (future.is_io()) then (yes)
        :struct ReadFuture {
    path: String,
    state: State,
    buffer: Vec<u8>
};

        |IO Future|
        if (self.state == State::Pending) then (yes)
            :executor.submit_io(
    self.path.clone(),
    self.buffer.clone(),
    cx.waker().clone()
);
            :Poll::Pending;

            |Executor|
            :io_tasks.push_back(IoTask::new(
    path,
    buffer,
    waker
));

            :Some(io_task) = io_tasks.pop_front()
            process_io_task(io_task);

            if (io_task.is_complete()) then (yes)
                :waker.wake_by_ref();

                |Task|
                :executor.queue.push_back(self);
            else (no)
                :continue;
            endif

        else (no)
            :let data = String::from_utf8(
    self.buffer.clone()
).unwrap();
            :Poll::Ready(data);
        endif

    else (no)
        :future.poll(&mut cx)
Poll::Ready(());
    endif

    |Executor|
    :match poll_result;

endwhile

|Main|
:println!("All tasks completed");
stop
@enduml